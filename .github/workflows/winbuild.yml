name: Build Windows Release Installer

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # 3. Extract version from release tag
      - name: Get version from tag
        id: get_version
        run: |
          $tag = "${{ github.ref_name }}"
          if ($tag.StartsWith("v")) { $tag = $tag.Substring(1) }
          echo "version=$tag" >> $env:GITHUB_OUTPUT

      # 4. Update version numbers in .csproj + .wapproj
      - name: Update project versions
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $projects = @(
            "PlaylistRepoCLI/PlaylistRepoCLI.csproj",
            "PlaylistRepoAPI/PlaylistRepoAPI.csproj"
          )
          foreach ($proj in $projects) {
            (Get-Content $proj) `
              -replace '<Version>.*</Version>', "<Version>$version</Version>" `
              -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>" `
              -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$version.0</FileVersion>" |
              Set-Content $proj
          }

          $wapproj = "WinPackage/WinPackage.wapproj"
          (Get-Content $wapproj) `
            -replace '<PackageVersion>.*</PackageVersion>', "<PackageVersion>$version</PackageVersion>" |
            Set-Content $wapproj

      # 5. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore PlaylistRepo.sln

      # 6. Publish PlaylistRepoAPI (includes npm build)
      - name: Publish PlaylistRepoAPI
        run: dotnet publish PlaylistRepoAPI/PlaylistRepoAPI.csproj -c Release -r win-x64 --self-contained false -o publish/PlaylistRepoAPI

      # 7. Publish PlaylistRepoCLI
      - name: Publish PlaylistRepoCLI
        run: dotnet publish PlaylistRepoCLI/PlaylistRepoCLI.csproj -c Release -r win-x64 --self-contained false -o publish/PlaylistRepoCLI

      # 8. Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # 9. Build MSIX package
      - name: Build MSIX package
        run: msbuild WinPackage/WinPackage.wapproj /p:Configuration=Release /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundle=Always

      # 10. Collect artifacts
      - name: Collect artifacts
        run: |
          mkdir artifacts
          Copy-Item -Path "WinPackage/AppPackages" -Destination "artifacts/AppPackages" -Recurse

      # 11. Upload to GitHub release
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/AppPackages/**/*.msixbundle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 12. Install WinGetCreate
      - name: Install WinGetCreate
        run: winget install --id Microsoft.WingetCreate -e --accept-package-agreements --accept-source-agreements

      # 13. Generate WinGet manifest
      - name: Generate WinGet manifest
        id: manifest
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $bundle = Get-ChildItem -Path artifacts/AppPackages -Filter *.msixbundle -Recurse | Select-Object -First 1
          $url = "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$($bundle.Name)"
          $id = "AidenBradley.PlaylistRepo"
          mkdir manifests
          wingetcreate new $url --version $version --id $id --publisher "Aiden Bradley" --product "PlaylistRepo" --output manifests
          echo "manifest_path=manifests/$id/$version" >> $env:GITHUB_OUTPUT

      # 14. Commit and push manifest to winget-pkgs fork
      - name: Push manifest to winget-pkgs
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git clone https://github.com/${{ github.actor }}/winget-pkgs.git
          cd winget-pkgs
          $dest = "manifests/a/AidenBradley/PlaylistRepo/${{ steps.get_version.outputs.version }}"
          mkdir -Force $dest
          Copy-Item -Recurse "../${{ steps.manifest.outputs.manifest_path }}/*" -Destination $dest
          git add .
          git commit -m "Add PlaylistRepo v${{ steps.get_version.outputs.version }}"
          git push https://x-access-token:${{ secrets.WINGET_PAT }}@github.com/${{ github.actor }}/winget-pkgs.git HEAD:master
  winget:
    runs-on: ubuntu-latest
    needs: build-windows

    steps:
      - name: Checkout winget-pkgs fork
        run: |
          git clone https://github.com/${{ github.actor }}/winget-pkgs.git
          cd winget-pkgs
          git checkout -B winget-auto

      - name: Download built installer
        uses: actions/download-artifact@v4
        with:
          name: WindowsInstaller
          path: installer

      - name: Setup wingetcreate
        run: |
          dotnet tool install --global Microsoft.WinGetCreate --version 1.*
          echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Generate manifest
        run: |
          mkdir -p manifests/A/AidenBradley/PlaylistRepo
          wingetcreate new \
            -u "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/PlaylistRepoInstaller.msixbundle" \
            -v "${{ github.event.release.tag_name }}" \
            -o "manifests/A/AidenBradley/PlaylistRepo" \
            -p "installer/PlaylistRepoInstaller.msixbundle" \
            --no-validation

      - name: Commit and push manifest
        run: |
          cd winget-pkgs
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add manifests/A/AidenBradley/PlaylistRepo
          git commit -m "Update PlaylistRepo to version ${{ github.event.release.tag_name }}"
          git push https://x-access-token:${{ secrets.WINGET_PAT }}@github.com/${{ github.actor }}/winget-pkgs.git winget-auto --force

      - name: Create PR to microsoft/winget-pkgs
        env:
          GH_TOKEN: ${{ secrets.WINGET_PAT }}
        run: |
          gh pr create \
            --repo microsoft/winget-pkgs \
            --title "Update PlaylistRepo to ${{ github.event.release.tag_name }}" \
            --body "Automated PR generated by GitHub Actions" \
            --head "${{ github.actor }}:winget-auto" \
            --base master || echo "PR already exists or creation skipped."