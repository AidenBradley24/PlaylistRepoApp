name: Build Windows Release Installer

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # 3. Extract version from release tag
      - name: Get version from tag
        id: get_version
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          if ($tag.StartsWith("v")) { $tag = $tag.Substring(1) }
          echo "version=$tag" >> $env:GITHUB_OUTPUT

      # 4. Update project versions
      - name: Update project versions
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $projects = @(
            "PlaylistRepoCLI/PlaylistRepoCLI.csproj",
            "PlaylistRepoAPI/PlaylistRepoAPI.csproj"
          )
          foreach ($proj in $projects) {
            (Get-Content $proj) `
              -replace '<Version>.*</Version>', "<Version>$version</Version>" `
              -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>" `
              -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$version.0</FileVersion>" |
              Set-Content $proj
          }

      # 5. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore PlaylistRepo.sln

      # 6. Publish API (includes npm build)
      - name: Publish PlaylistRepoAPI
        run: dotnet publish PlaylistRepoAPI/PlaylistRepoAPI.csproj -c Release -r win-x64 -o publish/PlaylistRepoAPI

      # 7. Publish CLI
      - name: Publish PlaylistRepoCLI
        run: dotnet publish PlaylistRepoCLI/PlaylistRepoCLI.csproj -c Release -r win-x64 -o publish/PlaylistRepoCLI

      # 8. Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup --no-progress -y

      # 9. Build Installer
      - name: Build installer
        run: |
          iscc scripts/wininstaller.iss /dMyAppVersion=${{ steps.get_version.outputs.version }}

      # 10. Verify installer exists
      - name: Verify installer
        shell: pwsh
        run: |
          if (-not (Test-Path "Output\PlaylistRepoInstaller.exe")) {
            Write-Error "Installer not found! Failing build."
            exit 1
          }

      # 11. Create ZIP packages
      - name: Create ZIP archives
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          Compress-Archive -Path "publish/PlaylistRepoCLI/*" -DestinationPath "PlaylistRepoCLI-v$version.zip"
          Compress-Archive -Path "publish/PlaylistRepoAPI/*" -DestinationPath "PlaylistRepoAPI-v$version.zip"

      # 12. Upload artifacts to GitHub Release
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Output/PlaylistRepoInstaller.exe
            PlaylistRepoCLI-v${{ steps.get_version.outputs.version }}.zip
            PlaylistRepoAPI-v${{ steps.get_version.outputs.version }}.zip
          fail_on_unmatched_files: true
          tag_name: ${{ github.ref_name }}
          name: "PlaylistRepo ${{ steps.get_version.outputs.version }}"
          draft: false
          prerelease: false
          append_body: false
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
