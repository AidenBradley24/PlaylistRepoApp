name: Build Release Installer

on:
  release:
    types: [published]   # Only run when a GitHub Release is published

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Extract version from release tag
      - name: Get version from tag
        id: get_version
        run: |
          $tag = "${{ github.ref_name }}"
          if ($tag.StartsWith("v")) { $tag = $tag.Substring(1) }
          echo "version=$tag.0" >> $env:GITHUB_OUTPUT

      # 3. Update app project versions
      - name: Update app versions
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $projects = @("PlaylistRepoCLI/PlaylistRepoCLI.csproj", "PlaylistRepoAPI/PlaylistRepoAPI.csproj")

          foreach ($proj in $projects) {
            (Get-Content $proj) `
              -replace '<Version>.*</Version>', "<Version>$version</Version>" `
              -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$version</AssemblyVersion>" `
              -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$version</FileVersion>" |
              Set-Content $proj
          }

      # 4. Update .wapproj version
      - name: Update MSIX version
        run: |
          $proj = "WinPackage/WinPackage.wapproj"
          (Get-Content $proj) `
            -replace '<PackageVersion>.*</PackageVersion>', "<PackageVersion>${{ steps.get_version.outputs.version }}</PackageVersion>" |
            Set-Content $proj

      # 5. Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # 6. Setup NuGet
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      # 7. Restore NuGet
      - name: Restore NuGet packages
        run: nuget restore PlaylistRepo.sln

      # 8. Build MSIX bundle
      - name: Build MSIX package
        run: msbuild WinPackage/WinPackage.wapproj /p:Configuration=Release

      # 9. Upload as artifact (optional)
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: '**/AppPackages/**/*.msixbundle'

      # 10. Upload to GitHub Release
      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: '**/AppPackages/**/*.msixbundle'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 11. Install WinGetCreate tool
      - name: Install wingetcreate
        run: winget install --id Microsoft.WingetCreate -e --accept-package-agreements --accept-source-agreements

      # 12. Generate WinGet manifest
      - name: Generate WinGet manifest
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $url = "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(Get-ChildItem -Path **/AppPackages/**/*.msixbundle | Select-Object -First 1).Name"
          $id = "AidenBradley.PlaylistRepo"
          wingetcreate new $url --version $version --id $id --publisher "Aiden Bradley" --product "PlaylistRepo" --output manifests

      # 13. Upload WinGet manifest artifact
      - name: Upload manifest artifact
        uses: actions/upload-artifact@v4
        with:
          name: winget-manifest
          path: manifests/
